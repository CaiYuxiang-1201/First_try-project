#include<iostream>
#include<malloc.h>
#include<stdlib.h>                 //线性表顺序存储结构的常用代码（C++）
using namespace std;
typedef int Elemtype;
#define list_init_size 100
#define listincrement 10
typedef struct {
	Elemtype* elem;
	int length;
	int listsize;
}Sqlist;
void InitList_Sq(Sqlist& L) {                   //初始化一个新的空的线性表
	L.elem = (Elemtype*)malloc(list_init_size * sizeof(Elemtype));
	if (!L.elem) exit(0);
	L.length = 0;
	L.listsize = list_init_size;
}

void ListInsert_Sq(Sqlist& L, int i, Elemtype e) { //在线性表L的第i个位置之前插入一个新的元素
	if (i<1 || i>L.length + 1) exit(0);
	if (L.length >= L.listsize) {
		Elemtype* newbase = (Elemtype*)realloc(L.elem, (L.listsize + listincrement) * sizeof(Elemtype));
		if (!newbase)exit(0);

		L.elem = newbase;
		L.listsize += listincrement;
	}
	int* q = &(L.elem[i - 1]);
	for (int* p = &(L.elem[L.length - 1]); p >= q; --q)
	{
		*(p + 1) = *p;
	}
	*q = e;
	++L.length;
}

void GetElem(Sqlist L, int i, int &e)   //返回L中的第i个元素
{
	e = L.elem[i-1];
}
int ListLength(Sqlist L)    //返回L的长度
{
	return L.length;
}

bool locateElem(Sqlist L, int e)  //判断L中是否有e 0没有 1有
{
	for (int a = 0; a < L.length; a++)
	{
		if (e == L.elem[a])
			return 1;
	}
	return 0;
}

void uniion(Sqlist& La, Sqlist Lb)
{
	int La_len = ListLength(La);
	int Lb_len = ListLength(Lb);
	int e = 0;
	for (int i = 1; i <= Lb_len; i++) {
		GetElem(Lb, i, e);
		if (!locateElem(La, e)) { ListInsert_Sq(La, ++La_len, e);  }
	}
}

void Creat_SqList(Sqlist& L) {        //创建一个新的线性表
	int i, n;
	cout << "请输入顺序表的元素个数:";
	cin >> n;
	for (i = 0; i < n; i++) {
		cout << "请输入第 " << (i + 1) << " 个元素:";
		cin >> L.elem[i];
		L.length++;
	}
}
void ShowSqList(Sqlist &L)   //展示线性表
	{
		cout << endl;
		for (int i = 0; i < L.length; i++)
			cout << L.elem[i] << " ";
		cout << endl;
	}
	

/*int main()
{
	Sqlist La, Lb;
	InitList_Sq(La);
	InitList_Sq(Lb);
	Creat_SqList(La);
	Creat_SqList(Lb);
	uniion(La, Lb);
	cout << "连接以后的集合为";
	ShowSqList(La);
	return 0;
}*/






    //单链表常用代码

#include<iostream>
#include<stdio.h>
#include<malloc.h>                    
using namespace std;
typedef int Elemtype;

typedef struct Node     //创建一个结构体（单位结点的样子）
{
	Elemtype data;
	struct Node* Next;
}Node;
typedef struct Node* Linklist;      //把指向结点的指针变量类型命名为Linklist,同时也可表示整个链表

Linklist initList()  //初始化单链表
{
	Linklist node = (Linklist)malloc(sizeof(LNode));
	node->next = NULL;
	return node;
}


void GetElem(Linklist L, int i, Elemtype &e)  //获取链表L中第i个元素
{
	int j=1;
	Linklist p;            //定义一个指向结点的指针并且让它指向链表的第一个元素
	p = L->Next;

	while (p && j < i)     //让程序循环到第 i 个元素
	{
		p = p->Next;
		++j;
	}
	if (!p || j > i)  //防止程序出错 exit(1)表示进程正常退出. 返回 1;exit(0)表示进程非正常退出.返回 0
	{
		exit(0);
	}

	e = p->data;
}

void ListInsert_L(Linklist& L, int i, Elemtype e) { //在链表第i个结点之前插入一个新的结点(数据为e)
	Linklist p = L;           //创建一个指针，指向链表表头
	int j = 0;              //用j当一个计数器，使指针循环至 i-1 处
	while (L && j < i-1)         
	{                
		p = p->Next;
		j++;
	}
	if (!L || j > i)      //防止出错
	{
		exit(0);
	}
	Linklist s = (Linklist)malloc(sizeof(Node));    //创建一个新结点，插入
	s->data = e;
	s->Next = p->Next;
	p->Next = s;
}

void ListDelet_L(Linklist& L, int i, Elemtype& e) {  //删除链表L中第i个结点，i的data返回到e中
	Linklist p=L, q;           //让p指向要删除结点的前一个，q指向删除结点
	int j=0;
	while (L && j < i - 1)   //j计数器
	{
		p = p->Next;
		j++;
	}
	if (!(p->Next) || j > i - 1)   //防止出错，删除位置不合理
	{
		exit(0);
	}            
	q = p->Next;                 //改变（i-1）的next指向，取出结点data，free要删除的结点
	p->Next = q->Next;
	e = q->data;
	free(q);
}


void CreateList_L(Linklist L, int n) {  //逆向输入，创建一个有n个结点的单链表L（头插法）
	L = (Linklist)malloc(sizeof(Node));    //这个是表头结点，不储存数据
	L->Next = NULL;
	for (int i = n; i > 0; i--)
	{
		Linklist p = (Linklist)malloc(sizeof(Node));
		scanf_s("%d", &p->data);
		p->Next = L->Next;
		L->Next = p;
	}
}

void MergeList(Linklist& La, Linklist& Lb, Linklist& Lc) {
	Linklist pa = La->Next;      //创建两个指针分别指向a，b个链表
	Linklist pb = Lb->Next;
	Linklist pc;                  //用La的头结点当做c的头结点
	Lc = pc = La;
	while (La && Lb)              
	{
		if (pa->data <= pb->data) {
			pc->Next = pa;         
			pc = pa; 
			pa = pa->Next;
		}
		else {
			pc->Next = pb;
			pc = pb;
			pb = pb->Next;
		}
	}
	pc->Next = pa ? pa : pb;     //三目运算
	free(Lb);             //因为Lc是以La开头，所以不能释放La的头结点
	//释放Lb的头结点
}

void Tail_Add(Linklist* head, int val)          //尾插法插入一个结点(纯C语言）
{
	Linklist no = (Linklist)malloc(sizeof(struct Node));     //创建一个要插入的新结点
	no->data = val;
	no->Next = NULL;
	if (*head == NULL)
	{
		*head = no;                
	}
	else {
		Linklist N_tmp = *head;
		while (N_tmp->Next != NULL)
		{
			N_tmp = N_tmp->Next;
		}
		N_tmp->Next = no;
	}
}

void CreateListTail(Linklist *L,int n)        //尾插法创建一个有n个结点存储数据的单链表
				有头结点（纯C语言）
{
	Linklist p,r;	//r用来指向最后一个结点，p用来指向新创建的结点
	int i;

	srand(time(0));        //rand函数之前的预设函数
	*L=(Linklist)malloc(sizeof(Node));      //头结点，不用存储数据
	r=*L;

	for(i=0;i<n;i++){
		p=(Node*)malloc(sizeof(Node));
		p->data=rand()%100+1;        //%100表示取0-99之间的一个数
		r->next=p;
		r=p;
	}

	r->next=NULL;
}

void ClearList(Linklist *L)        		//删除整个单链表,传入的是指向头结点的指针(纯C语言)
{
	Linklist p,d;

	p=(*L)->next;

	while(p){
		q=p->next;
		free(p);
		p=q;
	}
	(*L)->next=NULL;
}

Linklist Reverse2(Linklist list)  //递归方法把单链表逆序
{
	Linklist newhead = NULL;
	if (NULL == list || NULL == list->next) {
		return list;
	}
	newhead = Reverse2(list->next);
	list->next->next = list;
	list->next = NULL;
	return newhead;
}

int Search_Bin(int a[11], int key) {  //对数组折半查找
	int low = 0, high = 10;
	int mid;
	while (low <= high)
	{
		mid = (low + high) / 2;
		if (key == a[mid]) return mid;
		else if (key < a[mid]) high = mid - 1;
		else low = mid + 1;
	}
	return 0;
}

			//循环链表（约瑟夫环问题）
#include<stdio.h>
#include<stdlib.h>

typedef struct node{
	int data;
	struct node* next;
}node;

node *create(int n) 		//创建一个有n个结点存储数据的循环链表
{
	node *p=NULL,  *head;
	head=(node*)malloc(sizeof(node));   //头结点
	P=head;    //创建链表时指向最后一个结点
	node *s;   //指向新建结点
	int i=1;

	if(n!=0){
		while(i<=n){
			s=(node*)malloc(sizeof(node));
			a->data=i++;
			p->next=s;
			p=s;
		}
		s->next=head->next;
	}
	free(head);
	return s->next;
}

int main()
{
	int n=41;   //元素总数
	int m=3;   //间隔元素个数
	int i;
	node *p=create(n);		//调用上述函数
	node *temp;                      //删除时用到的指针

	m%=n;

	while(p!=p->next){         //循环到只剩一个人
		for(i=1;i<m-1;i++){
			p=p->next;
		}
		printf("%d->",p->next->data);
		
		temp=p->next;
		p->next=temp->next;
		free(temp);
		p=p->next;
	}
	
	printf("%d\n",p->data);

	return 0;
}




  				//栈的顺序存储操作

#include <iostream>
#include <stdio.h>
#include <string>
#include <conio.h>
#include<malloc.h>    
typedef int SElemType;
//顺序操作(C++版）
#define STACK_INIT_SIZE 100;
#define STACK_INCREMENT 10;
int Stack_increment = 10;
typedef struct {
	SElemType* base;
	SElemType* top;
	int stacksize;
}SqStack;
//初始化
void InitStack(SqStack& S) {
	S.base = (SElemType*)malloc(100 * sizeof(SElemType));
	if (!S.base)
	{
		exit(0);
	}
	S.top = S.base;
	S.stacksize = STACK_INIT_SIZE;


}


//进栈
void Push(SqStack& S, SElemType& e) {
	if (S.top - S.base >= S.stacksize)
	{
		S.base = (SElemType*)realloc(S.base, (S.stacksize + Stack_increment) * sizeof(SElemType));
		if (!S.base) exit(0);
		S.top = S.base + S.stacksize;
		S.stacksize += STACK_INCREMENT;
	}
	*S.top++ = e;
}

//出栈,获取栈顶元素
void Pop(SqStack& S, SElemType& e) {
	if (S.top == S.base) exit(0);
	e = *--S.top;
}

void PrintSq(SqStack S) {
	while (S.top != S.base) {
		int e = *--S.top;
		printf("%d ", e);
	}
}

int main() {
	SqStack S;
	int num, e;
	InitStack(S);
	printf("请输入元素个数： ");
	scanf_s("%d", &num);
	printf("请输入元素：”）;
	for (int i = 0; i < num; i++) {
		scanf_s("%d", &e);
		Push(S, e);
	}
	printf("\n栈元素为： ");
	PrintSq(S);
	int top;
	Pop(S, top);
	printf("栈顶元素为 %d ", top);
	return 0;
}







      //栈的链式操作(纯C语言)

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#define ERROR 0
#define OK 1
#define TRUE 1
#define FALSE 0
typedef int Status;
typedef int EleType;
typedef struct StackNode {
	EleType data;//结点数据域
	struct StackNode* next;//结点指针域
}StackNode, * LinkStackPoi;
//链栈的数据结构
typedef struct LinkStack {
	LinkStackPoi top;//栈顶结点
	int count;//元素个数
}LinkStack;
//初始化
Status InitLinkStack(LinkStack* stack)
{
	if (!stack)
	{
		return	ERROR;
	}
	stack->top = NULL;
	stack->count = 0;
	return OK;
}
//清空数据，释放结点内存，实际上就是pop所有数据
Status ClearLinkStack(LinkStack* stack)
{
	if (!stack || !stack->count)
	{
		return	ERROR;
	}
	while (stack->count)
	{
		StackNode* node = stack->top;
		stack->top = node->next;
		free(node);
		stack->count--;
	}
	return OK;
}
//判断链栈是否为空
Status EmptyLinkStack(LinkStack* stack) {
	if (!stack)
	{
		return ERROR;
	}
	return stack->count == 0 ? 1 : 0;
}
//获取元素个数
int GetLengthLinkStack(LinkStack* stack)
{
	if (!stack)
	{
		return	-1;
	}
	return stack->count;
}
Status GetTop(LinkStack* stack, StackNode** stackNode) //获取栈顶元素
{
	if (!stack)
	{
		return	ERROR;
	}
	*stackNode = stack->top;//将栈顶元素的指针返回，获取指向可修改栈顶元素内容。
	return OK;
}

//弹栈
//栈顶指针指向要弹出元素前置结点，然后释放弹出元素内存空间，然后count-1

Status pop(LinkStack* stack, EleType* e)
{
	if (!stack && stack->count)
	{
		return	ERROR;
	}
	StackNode* node = stack->top;
	*e = node->data;
	stack->top = node->next;//栈顶指针指向新的栈顶元素
	free(node);//释放元素空间
	stack->count--;
	return OK;
}

//压栈
//先将压入元素放入到链表表中，然后再将栈顶指针指向压入的元素，然后count+1.

Status push(LinkStack* stack, EleType e)
{
	if (!stack)
	{
		return ERROR;
	}
	StackNode* node = (StackNode*)malloc(sizeof(StackNode));
	node->next = stack->top;//将元素加入链表中
	node->data = e;
	stack->top = node;//栈顶元素指向压入元素
	stack->count++;
	return OK;
}
void PrintfLinkStack(LinkStack* stack)
{
	if (!stack && stack->count)
	{
		return;
	}
	StackNode* node = stack->top;
	while (node)
	{
		printf("%d,", node->data);
		node = node->next;
	}
	puts("");
	return;
}
int main() {
	LinkStack stack1;
	int num,e;
	InitLinkStack(&stack1);

	printf("请输入元素个数： ");
	scanf_s("%d", &num);
	printf("请输入元素： ");
	for (int i = 0; i < num; i++) {
		scanf_s("%d", &e);
		push(&stack1, e);
	}
	printf("栈元素为：");
	PrintfLinkStack(&stack1);

	pop(&stack1, &e);
	printf("出栈后栈的元素为： ");
	PrintfLinkStack(&stack1);
	printf("出栈元素为：%d",e);
	return 0;
}


                    //循环列表用指针链表
/*
#include <stdio.h>
#include <malloc.h>
#define MAXSIZE 60
typedef int QElemType;
typedef bool Status;
typedef struct {
	QElemType* base;
	int* front;
	int* rear;
}SqQueue;

Status InitQueue(SqQueue& Q) {
	//构造一个空队列
	Q.base = (QElemType*)malloc(MAXSIZE * sizeof(QElemType));
	Q.front = Q.rear = Q.base;
	return 1;
}
Status EnQueue(SqQueue& Q, QElemType e) {
	//插入元素e为Q的新的队尾元素
	if (Q.base + ((Q.rear - Q.base + 1) % MAXSIZE) == Q.front) return 0;
	*Q.rear = e;
	Q.rear = Q.base + (Q.rear - Q.base + 1) % MAXSIZE;
	return 1;
}
Status DeQueue(SqQueue& Q, QElemType& e) {
	//若队列不为空，则删除Q的队头元素，用e返回值，返回1，否则返回0
	if (Q.front == Q.rear) return 0;
	e = *Q.front;
	Q.front = Q.base + (Q.front - Q.base + 1) % MAXSIZE;
	return 1;
}
void print(SqQueue& Q)
{
	while (Q.front != Q.rear)
	{
		printf("%d ", *Q.front);
		Q.front = Q.base + (Q.front - Q.base + 1) % MAXSIZE;
	}
}
int main() {
	SqQueue Q;
	InitQueue(Q); //构建链表栈并初始化
	int hou;
	printf("队列的个数:");
	scanf("%d", &hou);
	printf("输入队列的元素:");
	QElemType e;
	for (int i = 1; i <= hou; i++)
	{
		scanf("%d", &e);
		EnQueue(Q, e);
	}
	DeQueue(Q, e);
	printf("删除队列顶元素：%d\n", e);
	printf("删除元素之后剩余元素:");
	print(Q);
	return 0;
}
*/


                            //队列的链式存储操作
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
// 队列链式操作
typedef struct QNode {
	int data;
	struct QNode* next;
}QNode, * QueuePtr;

typedef struct {
	QueuePtr front;
	QueuePtr rear;
}LinkQueue;

void InitQueue(LinkQueue& Q) {          //初始化队列
	Q.front = Q.rear = (QueuePtr)malloc(sizeof(QNode));
	Q.front->next = NULL;
}

void EnQueue(LinkQueue& Q, int& e)      //进队
{
	QueuePtr p = (QueuePtr)malloc(sizeof(QNode));
	p->data = e;
	p->next = NULL;
	Q.rear->next = p;
	Q.rear = p;
}

void DeQueue(LinkQueue& Q, int& e)     //出队
{
	QueuePtr p = Q.front->next;
	e = p->data;
	Q.front->next = p->next;
	if (Q.rear == p) { Q.front == Q.rear; }
	free(p);
}

void PrintQueue(LinkQueue Q) {
	QueuePtr now= Q.front->next;
	while (now) {
		printf("%d,", now->data);
		now = now->next;
	}
}

int main() {
	LinkQueue Q;
	int num,e;
	InitQueue(Q);
	printf("请输入元素个数：");
	scanf_s("%d", &num);
	printf("请输入元素： ");
	for (int i = 0; i < num; i++) {
		scanf_s("%d", &e);
		EnQueue(Q, e);
	}
	printf("入队后的元素为: ");
	PrintQueue(Q);
	DeQueue( Q, e);
	printf("出队元素为：%d  ", e);
	printf("出队后，队元素还有：");
	PrintQueue(Q);
	return 0;
}


                                      //队列的顺序存储操作

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>			//队列的顺序操作
typedef int QElemType;
typedef struct {
	QElemType data[100];
	int rear;            //头指针
	int front;           //尾指针，若队列不为空，指向队尾元素的下一个元素
}SqQueue;

//初始化一个空队列
void InitQueue(SqQueue* Q) {
	Q->rear = 0;
	Q->front = 0;
}

//若队列未满，插入元素e为新的队尾元素
void insertQueue(SqQueue* Q, QElemType e) {
	if ((Q->rear + 1) % 100 == Q->front) {    //队满
		exit(0);
	}
	Q->data[Q->rear] = e;
	Q->rear = (Q->rear + 1) % 100;
}

//若队列不为空，删除Q的对头元素，并用e返回
void deleteQueue(SqQueue* Q, QElemType* e) {
	if (Q->rear == Q->front) {                //队空
		exit(0);
	}
	*e = Q->data[Q->front];
	Q->front = (Q->front + 1) % 100;
}

void PrintQueue(SqQueue *Q) {  //输出队列
	int e;
	int now;
	now = Q->front ;
	printf("队列元素为： ");
	while (now != Q->rear) {
		printf("%d,", Q->data[now]);
		now = (now + 1) % 100;
	}
}


			      	       哈夫曼编码


#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include <string.h>
using namespace std;
typedef struct {
	int weight;
	 int parent, lchld, rchild;
}HTNode, * HuffmanTree;
typedef char** HuffmanCode;

void Select(HuffmanTree HT, int end, int *s1, int *s2)
{
	int min1, min2;
	//遍历数组初始下标为 1
	int i = 1;
	//找到还没构建树的结点
	while (HT[i].parent != 0 && i <= end) {
		i++;
	}
	min1 = HT[i].weight;
	*s1 = i;

	i++;
	while (HT[i].parent != 0 && i <= end) {
		i++;
	}
	//对找到的两个结点比较大小，min2为大的，min1为小的
	if (HT[i].weight < min1) {
		min2 = min1;
		*s2 = *s1;
		min1 = HT[i].weight;
		*s1 = i;
	}
	else {
		min2 = HT[i].weight;
		*s2 = i;
	}
	//两个结点和后续的所有未构建成树的结点做比较
	for (int j = i + 1; j <= end; j++)
	{
		//如果有父结点，直接跳过，进行下一个
		if (HT[j].parent != 0) {
			continue;
		}
		//如果比最小的还小，将min2=min1，min1赋值新的结点的下标
		if (HT[j].weight < min1) {
			min2 = min1;
			min1 = HT[j].weight;
			*s2 = *s1;
			*s1 = j;
		}
		//如果介于两者之间，min2赋值为新的结点的位置下标
		else if (HT[j].weight >= min1 && HT[j].weight < min2) {
			min2 = HT[j].weight;
			*s2 = j;
		}
	}
}

//HT为地址传递的存储哈夫曼树的数组，w为存储结点权重值的数组，n为结点个数
void CreateHuffmanTree(HuffmanTree* HT, char* w, int n)
{
	if (n <= 1) return; // 如果只有一个编码就相当于0
	int m = 2 * n - 1; // 哈夫曼树总节点数，n就是叶子结点
	*HT = (HuffmanTree)malloc((m + 1) * sizeof(HTNode)); // 0号位置不用
	HuffmanTree p = *HT;
	// 初始化哈夫曼树中的所有结点
	for (int i = 1; i <= n; i++)
	{
		(p + i)->weight = *(w + i - 1);
		(p + i)->parent = 0;
		(p + i)->lchld = 0;
		(p + i)->rchild = 0;
	}
	//从树组的下标 n+1 开始初始化哈夫曼树中除叶子结点外的结点
	for (int i = n + 1; i <= m; i++)
	{
		(p + i)->weight = 0;
		(p + i)->parent = 0;
		(p + i)->lchld = 0;
		(p + i)->rchild = 0;
	}
	//构建哈夫曼树
	for (int i = n + 1; i <= m; i++)
	{
		int s1, s2;
		Select(*HT, i - 1, &s1, &s2);
		(*HT)[s1].parent = (*HT)[s2].parent = i;
		(*HT)[i].lchld= s1;
		(*HT)[i].rchild = s2;
		(*HT)[i].weight = (*HT)[s1].weight + (*HT)[s2].weight;
	}
}
//HT为哈夫曼树，HC为存储结点哈夫曼编码的二维动态数组，n为结点的个数
void HuffmanCoding(HuffmanTree HT, HuffmanCode* HC, int n) {
	*HC = (HuffmanCode)malloc((n + 1) * sizeof(char*));
	char* cd = (char*)malloc(n * sizeof(char)); //存放结点哈夫曼编码的字符串数组
	cd[n - 1] = '\0';//字符串结束符

	for (int i = 1; i <= n; i++) {
		//从叶子结点出发，得到的哈夫曼编码是逆序的，需要在字符串数组中逆序存放
		int start = n - 1;
		//当前结点在数组中的位置
		int c = i;
		//当前结点的父结点在数组中的位置
		int j = HT[i].parent;
		// 一直寻找到根结点
		while (j != 0) {
			// 如果该结点是父结点的左孩子则对应路径编码为0，否则为右孩子编码为1
			if (HT[j].lchld == c)
				cd[--start] = '0';
			else
				cd[--start] = '1';
			//以父结点为孩子结点，继续朝树根的方向遍历
			c = j;
			j = HT[j].parent;
		}
		//跳出循环后，cd数组中从下标 start 开始，存放的就是该结点的哈夫曼编码
		(*HC)[i] = (char*)malloc((n - start) * sizeof(char));
		strcpy((*HC)[i], &cd[start]);
	}
	//使用malloc申请的cd动态数组需要手动释放
	free(cd);
}

void PrintHuffmanCode(HuffmanCode htable,char* w, int n)
{
	printf("Huffman code : \n");
	for (int i = 1; i <= n; i++)
		printf("%c code = %s\n", w[i], htable[i]);
}
